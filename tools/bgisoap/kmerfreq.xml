<tool id="kmerfreq" name="kmerfreq" version="0.1">
    <description>- a kmer frequency counter</description>
    <requirements>
        <requirement type="package">bgisoap</requirement>
    </requirements>
    <command interpreter="python">
        kmerfreq.py

        ##Need to enable Re-iterative adding of files
        ##Then need to save files into temp dir and
        ##Create a file containing the full path file names

        #for $i in $infiles
            --infile=$i.infile ##input
        #end for
        --out_stat=$out_stat ##output
        --out_freq=$out_freq ##output
        --out_filelist=$out_filelist ##output
        ## Check if using default or custom parameters
        --default_full_settings_type=$default_full_settings.settings_type
        #if $default_full_settings.settings_type == "full"
            --quality_cutoff=$quality_cutoff
            --seed_length=$seed_length
            --output_kmer_index=$output_kmer_index
            --format=$format
        #end if
    </command>
    <inputs>
        <repeat name="Input files" title="input files" min="1">
            <param name="inputfile" type="data" format="input" label="kmer file"/>
        </repeat>
        <conditional name="default_full_settings">
            <param name="settings_type" type="select" label="kmerfreq settings to use" help="Default settings are suitable for most analyses. If you want full control, use Full parameter list">
                <option value="default">Default</option>
                <option value="full">Full parameter list</option>
            </param>
                <when value="default"/>
                <when value="full">
                    <param name="quality_cutoff" type="integer" label="Quality cutoff" value="5"/>
                    <param name="seed_length" type="integer" label="Seed length" value="17"/>
                    <param name="output_kmer_index" type="select" label="Output kmer index with frequency?" value="0">
                        <option value="0">No</option>
                        <option value="1">Yes</option>
                    </param>
                    <param name="format" type="select" label="File format" value="1">
                        <option value="1">fq</option>
                        <option value="2">fa</option>
                    </param>
                </when>
            </conditional>
    </inputs>
    <outputs>
        <data name="stat" format="Tabular" label="Statistics file"/>
        <data name="freq" format="Tabular" label="Frequency information"/>
        <data name="filelist" format="Tabular" label="List of files processed by KmerFreq"/>
    </outputs>
    <tests>
        <test>
            <!--
                GapCloser –b config_file –a scaffold_file –o output_file
            -->
            <param name="refGenomeSource" value="indexed" />
            <param name="indices" value="phiX" />
            <param name="sPaired" value="single" />
            <param name="input1" value="bwa_wrapper_in1.fastqsanger" ftype="fastqsanger" />
            <param name="source_select" value="pre_set" />
            <param name="suppressHeader" value="true" />
            <output name="output" file="bwa_wrapper_out1.sam" ftype="sam" sort="True" />
        </test>
    </tests>
    <help>
**What it does**

KmerFreq is a component of the Correction package which is part of the SOAPdenovo tool for de novo construction of genomes. The read correction package is a short-read correction tool and part of SOAPdenovo. The Correction package is specially designed to correct Illumina GA short reads.
This package includes 4 programs:

1.	KmerFreq (a kmer frequency counter),
2.	Corrector (a program which does the correction work),
3.	merge_pair.pl (extract pairs from two files which contains read1 and read2 separately),
4.	merge_pair_list.pl (extract pairs from a list of two files).GapCloser closes gaps emerging from the scaffolding process by SOAPdenovo by using the abundant pair relationships of short reads.

The Correction package works with large plant and animal genomes, although it also works well on bacteria and fungi genomes. The package runs on a 64-bit Linux system with a minimum of 18G of physical memory.

-----

**Outputs**

Two output files are generated by KmerFreq:

1. stat
2. freq

    </help>
</tool>


